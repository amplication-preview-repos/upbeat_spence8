/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Recherche } from "./Recherche";
import { RechercheCountArgs } from "./RechercheCountArgs";
import { RechercheFindManyArgs } from "./RechercheFindManyArgs";
import { RechercheFindUniqueArgs } from "./RechercheFindUniqueArgs";
import { CreateRechercheArgs } from "./CreateRechercheArgs";
import { UpdateRechercheArgs } from "./UpdateRechercheArgs";
import { DeleteRechercheArgs } from "./DeleteRechercheArgs";
import { ItinRaireFindManyArgs } from "../../itinRaire/base/ItinRaireFindManyArgs";
import { ItinRaire } from "../../itinRaire/base/ItinRaire";
import { RechercheService } from "../recherche.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Recherche)
export class RechercheResolverBase {
  constructor(
    protected readonly service: RechercheService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Recherche",
    action: "read",
    possession: "any",
  })
  async _recherchesMeta(
    @graphql.Args() args: RechercheCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Recherche])
  @nestAccessControl.UseRoles({
    resource: "Recherche",
    action: "read",
    possession: "any",
  })
  async recherches(
    @graphql.Args() args: RechercheFindManyArgs
  ): Promise<Recherche[]> {
    return this.service.recherches(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Recherche, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Recherche",
    action: "read",
    possession: "own",
  })
  async recherche(
    @graphql.Args() args: RechercheFindUniqueArgs
  ): Promise<Recherche | null> {
    const result = await this.service.recherche(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Recherche)
  @nestAccessControl.UseRoles({
    resource: "Recherche",
    action: "create",
    possession: "any",
  })
  async createRecherche(
    @graphql.Args() args: CreateRechercheArgs
  ): Promise<Recherche> {
    return await this.service.createRecherche({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Recherche)
  @nestAccessControl.UseRoles({
    resource: "Recherche",
    action: "update",
    possession: "any",
  })
  async updateRecherche(
    @graphql.Args() args: UpdateRechercheArgs
  ): Promise<Recherche | null> {
    try {
      return await this.service.updateRecherche({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Recherche)
  @nestAccessControl.UseRoles({
    resource: "Recherche",
    action: "delete",
    possession: "any",
  })
  async deleteRecherche(
    @graphql.Args() args: DeleteRechercheArgs
  ): Promise<Recherche | null> {
    try {
      return await this.service.deleteRecherche(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ItinRaire], { name: "itinRaires" })
  @nestAccessControl.UseRoles({
    resource: "ItinRaire",
    action: "read",
    possession: "any",
  })
  async findItinRaires(
    @graphql.Parent() parent: Recherche,
    @graphql.Args() args: ItinRaireFindManyArgs
  ): Promise<ItinRaire[]> {
    const results = await this.service.findItinRaires(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
