/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ItinRaire } from "./ItinRaire";
import { ItinRaireCountArgs } from "./ItinRaireCountArgs";
import { ItinRaireFindManyArgs } from "./ItinRaireFindManyArgs";
import { ItinRaireFindUniqueArgs } from "./ItinRaireFindUniqueArgs";
import { CreateItinRaireArgs } from "./CreateItinRaireArgs";
import { UpdateItinRaireArgs } from "./UpdateItinRaireArgs";
import { DeleteItinRaireArgs } from "./DeleteItinRaireArgs";
import { Recherche } from "../../recherche/base/Recherche";
import { ItinRaireService } from "../itinRaire.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ItinRaire)
export class ItinRaireResolverBase {
  constructor(
    protected readonly service: ItinRaireService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ItinRaire",
    action: "read",
    possession: "any",
  })
  async _itinRairesMeta(
    @graphql.Args() args: ItinRaireCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ItinRaire])
  @nestAccessControl.UseRoles({
    resource: "ItinRaire",
    action: "read",
    possession: "any",
  })
  async itinRaires(
    @graphql.Args() args: ItinRaireFindManyArgs
  ): Promise<ItinRaire[]> {
    return this.service.itinRaires(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ItinRaire, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ItinRaire",
    action: "read",
    possession: "own",
  })
  async itinRaire(
    @graphql.Args() args: ItinRaireFindUniqueArgs
  ): Promise<ItinRaire | null> {
    const result = await this.service.itinRaire(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItinRaire)
  @nestAccessControl.UseRoles({
    resource: "ItinRaire",
    action: "create",
    possession: "any",
  })
  async createItinRaire(
    @graphql.Args() args: CreateItinRaireArgs
  ): Promise<ItinRaire> {
    return await this.service.createItinRaire({
      ...args,
      data: {
        ...args.data,

        recherche: args.data.recherche
          ? {
              connect: args.data.recherche,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItinRaire)
  @nestAccessControl.UseRoles({
    resource: "ItinRaire",
    action: "update",
    possession: "any",
  })
  async updateItinRaire(
    @graphql.Args() args: UpdateItinRaireArgs
  ): Promise<ItinRaire | null> {
    try {
      return await this.service.updateItinRaire({
        ...args,
        data: {
          ...args.data,

          recherche: args.data.recherche
            ? {
                connect: args.data.recherche,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItinRaire)
  @nestAccessControl.UseRoles({
    resource: "ItinRaire",
    action: "delete",
    possession: "any",
  })
  async deleteItinRaire(
    @graphql.Args() args: DeleteItinRaireArgs
  ): Promise<ItinRaire | null> {
    try {
      return await this.service.deleteItinRaire(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Recherche, {
    nullable: true,
    name: "recherche",
  })
  @nestAccessControl.UseRoles({
    resource: "Recherche",
    action: "read",
    possession: "any",
  })
  async getRecherche(
    @graphql.Parent() parent: ItinRaire
  ): Promise<Recherche | null> {
    const result = await this.service.getRecherche(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
